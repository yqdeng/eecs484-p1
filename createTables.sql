CREATE TABLE USERS(
	USER_ID NUMBER PRIMARY KEY,
	FIRST_NAME VARCHAR2(100) NOT NULL,
	LAST_NAME VARCHAR2(100) NOT NULL,
	YEAR_OF_BIRTH INTEGER,
	MONTH_OF_BIRTH INTEGER,
	DAY_OF_BIRTH INTEGER,
	GENDER VARCHAR2(100)
);

CREATE TABLE FRIENDS(
	USER1_ID NUMBER NOT NULL,
	USER2_ID NUMBER NOT NULL,
	CONSTRAINT NOTTHESAME CHECK(USER1_ID != USER2_ID)
);

CREATE OR REPLACE TRIGGER EXISTEDFRIENDSHIP
	AFTER INSERT ON FRIENDS
		FOR EACH ROW
			DECLARE
				c NUMBER;
			BEGIN
				SELECT COUNT(*) INTO c
				FROM FRIENDS F
				WHERE :NEW.USER1_ID = F.USER2_ID
				AND :NEW.USER2_ID = F.USER1_ID;

				IF c > 0 
				THEN
					ROLLBACK;
				END IF;
			END;
/

CREATE TABLE CITIES(
	CITY_ID INTEGER PRIMARY KEY,
	CITY_NAME VARCHAR2(100) ,
	STATE_NAME VARCHAR2(100),
	COUNTRY_NAME VARCHAR2(100) 
);

CREATE TABLE USER_CURRENT_CITY(
	USER_ID NUMBER FOREIGN KEY REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	CURRENT_CITY_ID NUMBER FOREIGN KEY REFERENCES CITIES(CITY_ID) ON DELETE CASCADE,
	UNIQUE(USER_ID)
);

CREATE TABLE USER_HOMETOWN_CITY(
	UNIQUE(USER_ID) NUMBER FOREIGN KEY REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	HOMETOWN_CITY_ID NUMBER FOREIGN KEY REFERENCES CITIES(CITY_ID) ON DELETE CASCADE
);

CREATE TABLE MESSAGES(
	MESSAGE_ID NUMBER PRIMARY KEY,
	SENDER_ID NUMBER FOREIGN KEY REFERENCES USERS(USER_ID) ON DELETE SET NULL,
	RECEIVER_ID NUMBER FOREIGN KEY REFERENCES USERS(USER_ID) ON DELETE SET NULL,
	MESSAGE_CONTENT VARCHAR2(2000) NOT NULL,
	SENT_TIME TIMESTAMP NOT NULL
);

CREATE TABLE PROGRAMS(
	PROGRAM_ID INTEGER PRIMARY KEY,
	INSTITUTION VARCHAR2(100) NOT NULL,
	CONCENTRATION VARCHAR2(100) NOT NULL,
	DEGREE VARCHAR2(100) NOT NULL
);

CREATE TABLE EDUCATION(
	USER_ID NUMBER FOREIGN KEY REFERENCES USERS(USER_ID),
	PROGRAM_ID INTEGER FOREIGN KEY REFERENCES PROGRAMS(PROGRAM_ID),
	PROGRAM_YEAR INTEGER NOT NULL
);

CREATE TABLE USER_EVENTS(
	EVENT_ID NUMBER PRIMARY KEY,
	EVENT_CREATOR_ID NUMBER FOREIGN KEY REFERENCES USERS(USER_ID) ON DELETE SET NULL,
	EVENT_NAME VARCHAR2(100) NOT NULL,
	EVENT_TAGLINE VARCHAR2(100),
	EVENT_DESCRIPTION VARCHAR2(100),
	EVENT_HOST VARCHAR2(100) NOT NULL,
	EVENT_TYPE VARCHAR2(100) NOT NULL,
	EVENT_SUBTYPE VARCHAR2(100) NOT NULL,
	EVENT_ADDRESS VARCHAR2(2000),
	EVENT_CITY_ID INTEGER FOREIGN KEY REFERENCES CITIES(CITY_ID) ON DELETE CASCADE,
	EVENT_START_TIME TIMESTAMP NOT NULL,
	EVENT_END_TIME TIMESTAMP NOT NULL
);

CREATE TABLE PARTICIPANTS(
	EVENT_ID NUMBER FOREIGN KEY REFERENCES USER_EVENTS(EVENT_ID),
	USER_ID NUMBER FOREIGN KEY REFERENCES USERS(USER_ID),
	CONFIRMATION VARCHAR2(100),
	CHECK (CONFIRMATION IS 
		IN {"attending", "unsure", "declined", "not_replied"}),
	UNIQUE(EVENT_ID, USER_ID)
);


CREATE TABLE ALBUMS(
	ALBUM_ID NUMBER PRIMARY KEY,
	ALBUM_OWNER_ID NUMBER FOREIGN KEY REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	ALBUM_NAME VARCHAR2(100) NOT NULL,
	ALBUM_CREATED_TIME TIMESTAMP NOT NULL,
	ALBUM_MODIFIED_TIME TIMESTAMP,
	ALBUM_LINK VARCHAR2(2000) NOT NULL,
	ALBUM_VISIBILITY VARCHAR2(100) NOT NULL,
	CHECK (ALBUM_VISIBILITY IS 
		IN {"everyone", "friends", "friends_of_friends", "myself", "custom"}),
	COVER_PHOTO_ID NUMBER FOREIGN KEY REFERENCES PHOTOS(PHOTO_ID) ON DELETE NO ACTION
);

CREATE TABLE PHOTOS(
	PHOTO_ID NUMBER PRIMARY KEY,
	ALBUM_ID NUMBER FOREIGN KEY REFERENCES ALBUMS(ALBUM_ID) ON DELETE CASCADE,
	PHOTO_CAPTION VARCHAR2(2000),
	PHOTO_CREATED_TIME TIMESTAMP NOT NULL,
	PHOTO_MODIFIED_TIME TIMESTAMP,
	PHOTO_LINK VARCHAR2(2000) NOT NULL
);

ALTER TABLE ALBUMS
	ADD CONSTRAINT COVER_CONSTRAINT
	FOREIGH KEY(COVER_PHOTO_ID) REFERENCES PHOTOS(PHOTO_ID) DEFERRABLE;
	ADD CONSTRAINT PHOTOEXIST_CONSTRAINT
		CHECK(
			IF EXISTS 
				(SELECT ALBUM_ID FROM ALBUMS
				MINUS
				SELECT ALBUM_ID FROM PHOTOS)
			) DEFERRABLE;



CREATE TABLE TAGS(
	TAG_PHOTO_ID NUMBER FOREIGN KEY REFERENCES PHOTOS(PHOTO_ID) ON DELETE CASCADE,
	TAG_SUBJECT_ID NUMBER FOREIGN KEY REFERENCES USERS(USER_ID) ON DELETE CASCADE,
	TAG_CREATED_TIME TIMESTAMP NOT NULL,
	TAG_X NUMBER NOT NULL,
	TAG_Y NUMBER NOT NULL,
	UNIQUE(TAG_SUBJECT_ID, TAG_PHOTO_ID)
);